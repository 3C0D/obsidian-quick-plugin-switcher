import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { config } from 'dotenv';
import manifest from "../manifest.json" assert { type: "json" };
import { copyFilesToTargetDir, isValidPath, copyFile } from "./utils.mts";
import path from "path";

config();

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/`;

async function validatePaths() {
	if (!await isValidPath("./src/main.ts")) {
		console.log("Invalid path for src/main.ts. main.ts must be in the src directory");
		process.exit(0);
	}
	if (!await isValidPath("./manifest.json")) {
		console.log("Invalid path for manifest.json");
		process.exit(0);
	}
}

async function handleStyles() {
	const stylesFilePath = './src/styles.css';
	const altStylesFilePath = './styles.css';
	const stylesFileExists = await isValidPath(stylesFilePath);
	const altStylesFileExists = await isValidPath(altStylesFilePath);

	if (!stylesFileExists && !altStylesFileExists) return true;
	if (altStylesFileExists && !stylesFileExists) {
		await copyFile(altStylesFilePath, stylesFilePath, "styles.css have been copied to src/styles.scss. This is needed to make things work with esbuild");
	}
	return false;
}

function getOutdir() {
	const REAL = process.env.REAL?.trim() || "-1";
	if (REAL === "-1") return { REAL, outdir: "./" };
	if (!process.env.REAL_VAULT && !process.env.TEST_VAULT) return { REAL: "-1", outdir: "./" };

	const outdir = REAL === "1"
		? process.env.REAL_VAULT?.trim() ?? "./"
		: process.env.TEST_VAULT?.trim() ?? "./";

	return { REAL, outdir: path.join(outdir, '.obsidian', 'plugins', manifest.id) };
}

async function main() {
	await validatePaths();
	const noStyles = await handleStyles();
	const prod = process.argv[2] === "production";
	const { REAL, outdir } = getOutdir();

	console.log("REAL", REAL);

	const entryPoints = noStyles ? ['src/main.ts'] : ['src/main.ts', 'src/styles.css'];
	console.log("entryPoints", entryPoints)

	const context = await esbuild.context({
		banner: { js: banner },
		minify: prod,
		entryPoints,
		bundle: true,
		external: [
			"obsidian",
			"electron",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/commands",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/view",
			"@lezer/common",
			"@lezer/highlight",
			"@lezer/lr",
			...builtins
		],
		format: "cjs",
		target: "es2018",
		logLevel: "info",
		sourcemap: prod ? false : "inline",
		treeShaking: true,
		outdir: outdir,
		outbase: "./src",
	});

	if (prod) {
		if (REAL === "1") {
			await copyFilesToTargetDir(outdir, manifest.id);
		}
		try {
			await context.rebuild();
			if (REAL === "1") console.log("Installed in the real vault");
		} catch (e) {
			console.log(e);
		}
		process.exit(0);
	} else {
		await copyFilesToTargetDir(outdir, manifest.id);
		await context.watch();
	}
}

main().catch(console.error);
