import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { config } from 'dotenv';
import manifest from "./manifest.json" assert { type: "json" };
import { isValidPath } from "./scripts/utils.mts";
import { copyFilesToTargetDir } from "./scripts/utils.mts";


config();

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
let outdir = "./";
if (!prod || process.env.REAL) {
	const vaultDir = process.env.REAL === "1"? process.env.REAL_VAULT : process.env.TEST_VAULT;
	outdir = `${vaultDir}/.obsidian/plugins/${manifest.id}`;
	// check if outdir/manifest.json and outdir/styles.css exists
	const man = `${outdir}/manifest.json`;
	const css = `${outdir}/styles.css`;
	// Copy manifest.json and styles.css if don't exist and create folder
	if (!await isValidPath(css) || !await isValidPath(man)){
		await copyFilesToTargetDir(outdir, man, css);
	}
}

console.info(`\nSaving plugin to ${outdir}\n`);

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	minify: prod ? true : false,
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outdir: outdir,
	outbase: "./src",
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}